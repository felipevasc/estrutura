generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Projeto {
  id        Int      @id @default(autoincrement())
  nome      String
  createdAt DateTime @default(now()) @map("criacao")
  updatedAt DateTime @updatedAt @map("atualizacao")

  dominios Dominio[]
  redes    Rede[]
  ips      Ip[]
  commands Command[]

  @@map("projetos")
}

model Dominio {
  id       Int     @id @default(autoincrement())
  endereco String
  alias    String?

  projetoId Int
  projeto   Projeto @relation(fields: [projetoId], references: [id])

  // Relação de auto-referência para subdomínios
  paiId       Int?
  pai         Dominio?  @relation("SubDominios", fields: [paiId], references: [id])
  subDominios Dominio[] @relation("SubDominios")

  ips Ip[]

  @@map("dominios")
}

model Rede {
  id    Int     @id @default(autoincrement())
  cidr  String
  alias String?

  projetoId Int
  projeto   Projeto @relation(fields: [projetoId], references: [id])

  // Relação de auto-referência para sub-redes
  paiId    Int?
  pai      Rede?    @relation("SubRedes", fields: [paiId], references: [id])
  subredes Rede[]   @relation("SubRedes")

  ips Ip[]

  @@map("redes")
}

model Ip {
  id    Int     @id @default(autoincrement())
  endereco  String

  projetoId Int
  projeto   Projeto @relation(fields: [projetoId], references: [id])

  dominios Dominio[]
  redes    Rede[]

  portas          Porta[]
  nmapScans       NmapScan[]
  whoisInfos      WhoisInfo[]
  dnsreconScans   DnsreconScan[]
  whatWebResults  WhatWebResult[]
  niktoScans      NiktoScan[]
  feroxbusterScans FeroxbusterScan[]
  testsslScans    TestsslScan[]
  nucleiScans     NucleiScan[]
  enum4linuxScans Enum4linuxScan[]
  webScreenshots  WebScreenshot[]


  @@map("ips")
}

model Porta {
  id        Int      @id @default(autoincrement())
  numero    Int
  protocolo String
  servico   String?
  versao    String?
  ipId      Int
  ip        Ip       @relation(fields: [ipId], references: [id])
  createdAt DateTime @default(now())

  @@map("portas")
}

model NmapScan {
  id        Int      @id @default(autoincrement())
  rawOutput String?
  ipId      Int
  ip        Ip       @relation(fields: [ipId], references: [id])
  createdAt DateTime @default(now())

  @@map("nmap_scans")
}

model WhoisInfo {
  id        Int      @id @default(autoincrement())
  rawOutput String?
  ipId      Int
  ip        Ip       @relation(fields: [ipId], references: [id])
  createdAt DateTime @default(now())

  @@map("whois_infos")
}

model DnsreconScan {
  id        Int      @id @default(autoincrement())
  rawOutput String?
  ipId      Int
  ip        Ip       @relation(fields: [ipId], references: [id])
  createdAt DateTime @default(now())

  @@map("dnsrecon_scans")
}

model WhatWebResult {
  id        Int      @id @default(autoincrement())
  rawOutput String?
  ipId      Int
  ip        Ip       @relation(fields: [ipId], references: [id])
  createdAt DateTime @default(now())

  @@map("whatweb_results")
}

model NiktoScan {
  id        Int      @id @default(autoincrement())
  rawOutput String?
  ipId      Int
  ip        Ip       @relation(fields: [ipId], references: [id])
  createdAt DateTime @default(now())

  @@map("nikto_scans")
}

model FeroxbusterScan {
  id        Int      @id @default(autoincrement())
  rawOutput String?
  ipId      Int
  ip        Ip       @relation(fields: [ipId], references: [id])
  createdAt DateTime @default(now())

  @@map("feroxbuster_scans")
}

model TestsslScan {
  id        Int      @id @default(autoincrement())
  rawOutput String?
  ipId      Int
  ip        Ip       @relation(fields: [ipId], references: [id])
  createdAt DateTime @default(now())

  @@map("testssl_scans")
}

model NucleiScan {
  id        Int      @id @default(autoincrement())
  rawOutput String?
  ipId      Int
  ip        Ip       @relation(fields: [ipId], references: [id])
  createdAt DateTime @default(now())

  @@map("nuclei_scans")
}

model Enum4linuxScan {
  id        Int      @id @default(autoincrement())
  rawOutput String?
  ipId      Int
  ip        Ip       @relation(fields: [ipId], references: [id])
  createdAt DateTime @default(now())

  @@map("enum4linux_scans")
}

model WebScreenshot {
  id        Int      @id @default(autoincrement())
  path      String
  port      Int
  ipId      Int
  ip        Ip       @relation(fields: [ipId], references: [id])
  createdAt DateTime @default(now())

  @@map("web_screenshots")
}

model Command {
  id              Int           @id @default(autoincrement())
  command         String
  args            String
  executedCommand String?
  projectId       Int
  project         Projeto       @relation(fields: [projectId], references: [id])
  status          CommandStatus @default(PENDING)
  output          String?
  rawOutput       String?
  createdAt       DateTime      @default(now())
  startedAt       DateTime?
  completedAt     DateTime?

  @@map("commands")
}

enum CommandStatus {
  PENDING
  RUNNING
  COMPLETED
  FAILED
}