generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Projeto {
  id        Int      @id @default(autoincrement())
  nome      String
  createdAt DateTime @default(now()) @map("criacao")
  updatedAt DateTime @updatedAt @map("atualizacao")

  dominios Dominio[]
  redes    Rede[]
  ips      Ip[]
  execucoes Execucao[]

  @@map("projetos")
}

model Dominio {
  id       Int     @id @default(autoincrement())
  endereco String
  alias    String?

  projetoId Int
  projeto   Projeto @relation(fields: [projetoId], references: [id])

  // Relação de auto-referência para subdomínios
  paiId       Int?
  pai         Dominio?  @relation("SubDominios", fields: [paiId], references: [id])
  subDominios Dominio[] @relation("SubDominios")

  ips Ip[]

  @@map("dominios")
}

model Rede {
  id    Int     @id @default(autoincrement())
  cidr  String
  alias String?

  projetoId Int
  projeto   Projeto @relation(fields: [projetoId], references: [id])

  // Relação de auto-referência para sub-redes
  paiId    Int?
  pai      Rede?    @relation("SubRedes", fields: [paiId], references: [id])
  subredes Rede[]   @relation("SubRedes")

  ips Ip[]

  @@map("redes")
}

model Ip {
  id    Int     @id @default(autoincrement())
  endereco  String

  projetoId Int
  projeto   Projeto @relation(fields: [projetoId], references: [id])

  dominios Dominio[]
  redes    Rede[]

  @@map("ips")
}

model Execucao {
  id              Int      @id @default(autoincrement())
  projetoId Int
  projeto   Projeto @relation(fields: [projetoId], references: [id])
  comando         String
  argumentos      String 
  status          StatusExecucao @default(AGUARDANDO)
  caminho_saida   String?
  mensagem_erro   String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime?
}

enum StatusExecucao {
  AGUARDANDO
  EXECUTANDO
  CONCLUIDO
  ERRO
}